#include "ESP32S3VGA.h"
#include <GfxWrapper.h>

// PinConfig and mode configuration
const PinConfig pins(-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 3, 10, 11);
VGA vga;
Mode mode = Mode::MODE_320x240x60;
GfxWrapper<VGA> gfx(vga, mode.hRes, mode.vRes);

// Button pins for Player 1 and Player 2
const int buttonPlayer1Up = 0;        // GPIO pin 0 (Player 1 Up/Left/Right)
const int buttonPlayer1Down = 14;     // GPIO pin 14 (Player 1 Down/Up/Down)

const int buttonPlayer2Up = 12;       // GPIO pin 12 (Player 2 Up/Left/Right)
const int buttonPlayer2Down = 13;     // GPIO pin 13 (Player 2 Down/Up/Down)

// Game state
int teabagX = 160, teabagY = 0;  // Teabag starts from the top
int teabagSpeedY = 2;

// Adjusted initial positions for Player 1 and Player 2 with more separation.
float cup1X = 10, cup1Y = mode.vRes - 30;  // Player 1 starts further left at the bottom-left
float cup2X = mode.hRes - 60, cup2Y = mode.vRes - 30;  // Player 2 starts at the bottom-right
const int cupHeight = 30, cupWidth = 50;
const int cupSpeed = 4;          // Speed at which cups move
int player1Score = 0, player2Score = 0;
const int winningScore = 10;     // Winning condition

bool gameOver = false;

void setup() {
    // Initialize buttons as input with pull-up resistors
    pinMode(buttonPlayer1Up, INPUT_PULLUP);
    pinMode(buttonPlayer1Down, INPUT_PULLUP);

    pinMode(buttonPlayer2Up, INPUT_PULLUP);
    pinMode(buttonPlayer2Down, INPUT_PULLUP);

    vga.bufferCount = 2;
    if (!vga.init(pins, mode, 16)) while (1) delay(1);

    vga.start();
}

void loop() {
    if (!gameOver) {
        vga.clear(vga.rgb(255, 255, 255));  // Set the background to white

        // Player 1: Move left on button press, move right on release (Up button: GPIO 0)
        if (digitalRead(buttonPlayer1Up) == LOW) {
            if (cup1X > 0) cup1X -= cupSpeed;  // Move left when pressed
        } else {
            if (cup1X < mode.hRes - cupWidth) cup1X += cupSpeed;  // Move right when released (no longer restricted to half of the screen)
        }

        // Player 1: Move up on button press, move down on release (Down button: GPIO 14)
        if (digitalRead(buttonPlayer1Down) == LOW) {
            if (cup1Y > 0) cup1Y -= cupSpeed;  // Move up when pressed
        } else {
            if (cup1Y < mode.vRes - cupHeight) cup1Y += cupSpeed;  // Move down when released
        }

        // Player 2: Move left on button press, move right on release (Up button: GPIO 12)
        if (digitalRead(buttonPlayer2Up) == LOW) {
            if (cup2X > 0) cup2X -= cupSpeed;  // Move left when pressed
        } else {
            if (cup2X < mode.hRes - cupWidth) cup2X += cupSpeed;  // Move right when released (no longer restricted to half of the screen)
        }

        // Player 2: Move up on button press, move down on release (Down button: GPIO 13)
        if (digitalRead(buttonPlayer2Down) == LOW) {
            if (cup2Y > 0) cup2Y -= cupSpeed;  // Move up when pressed
        } else {
            if (cup2Y < mode.vRes - cupHeight) cup2Y += cupSpeed;  // Move down when released
        }

        // Draw the cups
        gfx.fillRoundRect(cup1X, cup1Y, cupWidth, cupHeight, 5, vga.rgb(0, 0, 255));  // Player 1's cup (Blue)
        gfx.fillRoundRect(cup2X, cup2Y, cupWidth, cupHeight, 5, vga.rgb(255, 0, 0));  // Player 2's cup (Red)

        // Draw the teabag (Brown teabag with perforations)
        gfx.fillRect(teabagX, teabagY, 10, 10, vga.rgb(139, 69, 19));  // Brown teabag
        
        // Add small white dots for perforations
        gfx.fillRect(teabagX + 2, teabagY + 2, 1, 1, vga.rgb(255, 255, 255));  // Perforation 1
        gfx.fillRect(teabagX + 6, teabagY + 2, 1, 1, vga.rgb(255, 255, 255));  // Perforation 2
        gfx.fillRect(teabagX + 4, teabagY + 6, 1, 1, vga.rgb(255, 255, 255));  // Perforation 3

        // Teabag movement
        teabagY += teabagSpeedY;

        // Teabag collision with cups (catch the teabag)
        if (teabagX <= cup1X + cupWidth && teabagX >= cup1X && teabagY >= cup1Y && teabagY <= cup1Y + cupHeight) {
            player1Score++;
            resetTeabag();
        }
        if (teabagX >= cup2X && teabagX <= cup2X + cupWidth && teabagY >= cup2Y && teabagY <= cup2Y + cupHeight) {
            player2Score++;
            resetTeabag();
        }

        // Teabag falls off the screen (missed)
        if (teabagY > mode.vRes) {
            resetTeabag();  // Reset the teabag after missing
        }

        // Display scoreboard (Black text for scores)
        gfx.setTextColor(vga.rgb(0, 0, 0));
        gfx.setCursor(50, 30);
        gfx.print("Player 1: ");
        gfx.print(player1Score);
        gfx.setCursor(mode.hRes - 150, 30);
        gfx.print("Player 2: ");
        gfx.print(player2Score);

        // Check if any player has won
        if (player1Score >= winningScore) {
            declareWinner(1);
        } else if (player2Score >= winningScore) {
            declareWinner(2);
        }

        vga.show();
    }
}

// Function to reset the teabag to a random position after being caught or missed
void resetTeabag() {
    teabagX = random(0, mode.hRes - 10);  // Random horizontal position
    teabagY = 0;  // Start from the top
}

// Function to declare the winner and stop the game
void declareWinner(int player) {
    gameOver = true;  // Stop the game loop

    vga.clear(vga.rgb(255, 255, 255));  // Clear the screen
    gfx.setTextColor(vga.rgb(0, 0, 0));  // Display the message in black

    // Center the winner message on the screen
    gfx.setCursor((mode.hRes / 2) - 60, mode.vRes / 2);
    if (player == 1) {
        gfx.print("Player 1 Wins!");
    } else {
        gfx.print("Player 2 Wins!");
    }

    vga.show();
}
